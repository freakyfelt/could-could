{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "https://raw.githubusercontent.com/freakyfelt/could-could/main/schemas/policy-2023-02.schema.json",
  "type": "object",
  "required": ["statement"],
  "properties": {
    "id": {
      "type": "string",
      "description": "An optional policy identifier to allow for updating the policy at runtime"
    },
    "description": {
      "type": "string",
      "description": "An optional description of the policy"
    },
    "statement": {
      "oneOf": [
        { "$ref": "#/$defs/PolicyStatement" },
        {
          "type": "array",
          "minItems": 1,
          "items": { "$ref": "#/$defs/PolicyStatement" }
        }
      ]
    }
  },
  "$defs": {
    "PolicyStatement": {
      "type": "object",
      "required": ["action", "effect", "constraint"],
      "properties": {
        "sid": {
          "description": "An optional statement identifier (SID) for this statement in the policy",
          "type": "string"
        },
        "action": {
          "oneOf": [
            { "$ref": "#/$defs/globAll"},
            { "$ref": "#/$defs/actionSpecifier" },
            {
              "type": "array",
              "minItems": 1,
              "items": { "$ref": "#/$defs/actionSpecifier" },
              "uniqueItems": true
            }
          ]
        },
        "effect": {
          "enum": ["allow", "deny"],
          "description": "determines if this policy denies or allows if true. Deny always has precedence"
        },
        "constraint": {
          "oneOf": [
            {
              "type": "object",
              "additionalProperties": true
            },
            { "type": "boolean" }
          ]
        },
        "description": {
          "type": "string",
          "description": "an optional description of what the policy does"
        }
      }
    },
    "actionSpecifier": {
      "oneOf": [
        { "$ref": "#/$defs/actionName" },
        { "$ref": "#/$defs/globStart"},
        { "$ref": "#/$defs/globEnd"}
      ]
    },
    "actionName": {
      "description": "The exact action name",
      "type": "string",
      "pattern": "^([A-z0-9\\.:_-]+)$"
    },
    "globAll": {
      "description": "Match all actions",
      "enum": ["*"]
    },
    "globEnd": {
      "description": "Match all actions starting with the prefix",
      "type": "string",
      "pattern": "^[A-z0-9\\.:_-]+\\*$"
    },
    "globStart": {
      "description": "Match all actions ending with the postfix",
      "type": "string",
      "pattern": "^\\*[A-z0-9\\.:_-]+$"
    }
  }
}
